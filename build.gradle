/**
 * 아래 블로그를 참고하여 Codegen 을 사용하였다.
 * https://velog.io/@junho5336/OpenAPI-CodeGenerator-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0
 */
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'

    // openapi.generator 플러그인을 추가한다.
//    id 'org.openapi.generator' version '7.0.1'
}

group = 'com.study'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// 이 설정을 해줌으로써 build/generated 내부에 있는 코드를 import하고 사용할 수 있게된다.
//sourceSets {
//    main {
//        java.srcDirs("$buildDir/generated")
//    }
//}

//ext {
//    dirs = [
//            'contract'       : "$rootDir/contract",
//            'openApiGenerate': "$buildDir/openapi"
//    ]
//
//    openApiPackages = ['openapi.api', 'openapi.invoker', 'openapi.model']
//
//    generateOpenApiTasks = fileTree(dirs.get("contract"))
//            .files
//            .findAll { file -> file.name.endsWith('.yaml') }
//            .collect(file -> createOpenApiGenerateTask(file.name))
//}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // CodeGenerator로 작성되는 코드에 대해 다음과 같은 의존성이 필요하다
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // mysql
    implementation 'mysql:mysql-connector-java:8.0.33'

    // 비관적락 재시도를 도와주는 라이브러리
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'

}

tasks.named('test') {
    useJUnitPlatform()
}

//tasks.register("createOpenApi") {
//    doFirst {
//        println("Creating Code By OpenAPI...")
//    }
//    doLast {
//        println("OpenAPI Code created.")
//    }
//    dependsOn(generateOpenApiTasks)
//}
//
//tasks.register("moveGeneratedSources") {
//    doFirst {
//        println("Moving generated sources...")
//    }
//
//    doLast {
//        openApiPackages.each { packageName ->
//            def packagePath = packageName.replace(".", "/")
//            def originDir = file("${dirs.get('openApiGenerate')}/src/main/java/${packagePath}")
//            def destinationDir = file("$buildDir/generated/${packagePath}")
//            copy {
//                originDir = file("${dirs.get('openApiGenerate')}/src/main/java/${packagePath}")
//                destinationDir = file("$buildDir/generated/${packagePath}")
//                from originDir
//                into destinationDir
//            }
//        }
//        println 'Generated sources moved.'
//    }
//    dependsOn("createOpenApi")
//}
//
//tasks.register("cleanGeneratedDirectory") {
//    doFirst {
//        println("Cleaning generated directory...")
//    }
//    doLast {
//        def openApiGenerateDir = file(dirs.get('openApiGenerate'))
//        if (openApiGenerateDir.exists()) {
//            openApiGenerateDir.deleteDir()
//            println "Directory ${openApiGenerateDir} deleted."
//        } else {
//            println "Directory ${openApiGenerateDir} does not exist."
//        }
//    }
//    dependsOn("moveGeneratedSources")
//}
//
//tasks.named("compileJava") {
//    dependsOn("cleanGeneratedDirectory")
//}
//
//def createOpenApiGenerateTask(String fileName) {
//    tasks.register("openApiGenerate_$fileName", GenerateTask) {
//        getGeneratorName().set("spring")
//        getInputSpec().set("${dirs["contract"]}/$fileName")
//        getOutputDir().set(dirs.get("openApiGenerate") as String)
//        getApiPackage().set(openApiPackages[0] as String)
//        getInvokerPackage().set(openApiPackages[1] as String)
//        getModelPackage().set(openApiPackages[2] as String)
//        getConfigOptions().set(
//                [
//                        "dateLibrary"    : "spring",
//                        "useSpringBoot3" : "true",
//                        "useTags"        : "true",
//                        "openApiNullable": "false",
//                        "interfaceOnly"  : "true"
//                ]
//        )
//        getTemplateDir().set("${dirs.get('contract')}/template")
//    }
//}